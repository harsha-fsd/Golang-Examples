// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apiproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DateClient is the client API for Date service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DateClient interface {
	GetDateTime(ctx context.Context, in *RequestDateTime, opts ...grpc.CallOption) (*DateTime, error)
}

type dateClient struct {
	cc grpc.ClientConnInterface
}

func NewDateClient(cc grpc.ClientConnInterface) DateClient {
	return &dateClient{cc}
}

func (c *dateClient) GetDateTime(ctx context.Context, in *RequestDateTime, opts ...grpc.CallOption) (*DateTime, error) {
	out := new(DateTime)
	err := c.cc.Invoke(ctx, "/Date/GetDateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DateServer is the server API for Date service.
// All implementations must embed UnimplementedDateServer
// for forward compatibility
type DateServer interface {
	GetDateTime(context.Context, *RequestDateTime) (*DateTime, error)
	mustEmbedUnimplementedDateServer()
}

// UnimplementedDateServer must be embedded to have forward compatible implementations.
type UnimplementedDateServer struct {
}

func (UnimplementedDateServer) GetDateTime(context.Context, *RequestDateTime) (*DateTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDateTime not implemented")
}
func (UnimplementedDateServer) mustEmbedUnimplementedDateServer() {}

// UnsafeDateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DateServer will
// result in compilation errors.
type UnsafeDateServer interface {
	mustEmbedUnimplementedDateServer()
}

func RegisterDateServer(s grpc.ServiceRegistrar, srv DateServer) {
	s.RegisterService(&Date_ServiceDesc, srv)
}

func _Date_GetDateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateServer).GetDateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Date/GetDateTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateServer).GetDateTime(ctx, req.(*RequestDateTime))
	}
	return interceptor(ctx, in, info, handler)
}

// Date_ServiceDesc is the grpc.ServiceDesc for Date service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Date_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Date",
	HandlerType: (*DateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDateTime",
			Handler:    _Date_GetDateTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiproto.proto",
}
